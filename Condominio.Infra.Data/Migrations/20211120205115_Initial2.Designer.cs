// <auto-generated />
using System;
using Condominio.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Condominio.Infra.Data.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20211120205115_Initial2")]
    partial class Initial2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.9");

            modelBuilder.Entity("Condominio.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<short?>("ApplicationUserTypeCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserTypeCode");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("Condominio.Domain.Entities.ApplicationUserType", b =>
                {
                    b.Property<short>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Code");

                    b.ToTable("ApplicationUsersTypes");
                });

            modelBuilder.Entity("Condominio.Domain.Entities.Block", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CondominiumId")
                        .HasColumnType("TEXT");

                    b.Property<short?>("NumberOfLifts")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CondominiumId");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("Condominio.Domain.Entities.Condominium", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Condominiums");
                });

            modelBuilder.Entity("Condominio.Domain.Entities.Resident", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("Residents");
                });

            modelBuilder.Entity("Condominio.Domain.Entities.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Size")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("Code", "BlockId")
                        .IsUnique();

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Condominio.Domain.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Condominio.Domain.Entities.ApplicationUserType", "ApplicationUserType")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("ApplicationUserTypeCode");

                    b.OwnsOne("Condominio.Domain.Entities.Credential", "Credential", b1 =>
                        {
                            b1.Property<Guid>("ApplicationUserId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Email")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Password")
                                .HasColumnType("TEXT");

                            b1.Property<byte[]>("PasswordHash")
                                .HasColumnType("BLOB");

                            b1.Property<byte[]>("PasswordSalt")
                                .HasColumnType("BLOB");

                            b1.Property<string>("Username")
                                .HasColumnType("TEXT");

                            b1.HasKey("ApplicationUserId");

                            b1.ToTable("Credentials");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("ApplicationUserType");

                    b.Navigation("Credential");
                });

            modelBuilder.Entity("Condominio.Domain.Entities.Block", b =>
                {
                    b.HasOne("Condominio.Domain.Entities.Condominium", "Condominium")
                        .WithMany("Blocks")
                        .HasForeignKey("CondominiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condominium");
                });

            modelBuilder.Entity("Condominio.Domain.Entities.Condominium", b =>
                {
                    b.OwnsOne("Condominio.Domain.Entities.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CondominiumId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("City")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Complement")
                                .HasColumnType("TEXT");

                            b1.Property<string>("District")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Number")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PublicPlace")
                                .HasColumnType("TEXT");

                            b1.Property<string>("State")
                                .HasColumnType("TEXT");

                            b1.Property<string>("ZipCode")
                                .HasColumnType("TEXT");

                            b1.HasKey("CondominiumId");

                            b1.ToTable("Addresses");

                            b1.WithOwner()
                                .HasForeignKey("CondominiumId");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Condominio.Domain.Entities.Resident", b =>
                {
                    b.HasOne("Condominio.Domain.Entities.Unit", "Unit")
                        .WithMany("Residents")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Condominio.Domain.Entities.Unit", b =>
                {
                    b.HasOne("Condominio.Domain.Entities.Block", "Block")
                        .WithMany("Units")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");
                });

            modelBuilder.Entity("Condominio.Domain.Entities.ApplicationUserType", b =>
                {
                    b.Navigation("ApplicationUsers");
                });

            modelBuilder.Entity("Condominio.Domain.Entities.Block", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("Condominio.Domain.Entities.Condominium", b =>
                {
                    b.Navigation("Blocks");
                });

            modelBuilder.Entity("Condominio.Domain.Entities.Unit", b =>
                {
                    b.Navigation("Residents");
                });
#pragma warning restore 612, 618
        }
    }
}
